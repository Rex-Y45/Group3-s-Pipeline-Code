import maya.cmds as cmds
import os

class SceneBuildTool:
    def __init__(self):
        # 定义工作文件夹和发布文件夹的路径
        self.work_folder = ""
        self.publish_folder = ""

    def set_work_folder(self, folder_path):
        # 设置工作文件夹路径
        self.work_folder = folder_path
    
    def set_publish_folder(self, folder_path):
        # 设置发布文件夹路径
        self.publish_folder = folder_path

    def get_latest_version(self, asset_type, asset_name, pipeline_step, shot_name=None, sequence_name=None):
        """
        获取发布文件夹中最新版本的资产。
        如果是镜头相关资产（sequence），需要提供 sequence_name 和 shot_name。
        """
        if shot_name and sequence_name:
            # 镜头相关资产
            asset_path = os.path.join(self.publish_folder, "sequence", sequence_name, shot_name, pipeline_step, "source")
        else:
            # 资产类型相关资产
            asset_path = os.path.join(self.publish_folder, "assets", asset_type, asset_name, pipeline_step, "source")
        
        versions = sorted(os.listdir(asset_path))
        latest_version = versions[-1]  # 假设文件名按版本号排序
        return os.path.join(asset_path, latest_version)

    def load_asset(self, asset_type, asset_name, pipeline_step, shot_name=None, sequence_name=None):
        # 引用最新版本的资产
        latest_version = self.get_latest_version(asset_type, asset_name, pipeline_step, shot_name, sequence_name)
        cmds.file(latest_version, reference=True)
        print(f"{asset_type}/{asset_name} from {latest_version} loaded.")

    def check_for_updates(self, asset_type, asset_name, current_version, pipeline_step, shot_name=None, sequence_name=None):
        # 检查当前版本是否为最新版本
        latest_version = self.get_latest_version(asset_type, asset_name, pipeline_step, shot_name, sequence_name)
        if current_version != latest_version:
            print(f"Update available for {asset_type}/{asset_name}. Updating to {latest_version}")
            cmds.file(latest_version, loadReference=True)
        else:
            print(f"{asset_type}/{asset_name} is already up to date.")

    def roll_back_version(self, asset_type, asset_name, target_version, pipeline_step, shot_name=None, sequence_name=None):
        # 回滚到特定版本
        if shot_name and sequence_name:
            asset_path = os.path.join(self.publish_folder, "sequence", sequence_name, shot_name, pipeline_step, "source", target_version)
        else:
            asset_path = os.path.join(self.publish_folder, "assets", asset_type, asset_name, pipeline_step, "source", target_version)
        cmds.file(asset_path, loadReference=True)
        print(f"{asset_type}/{asset_name} rolled back to {target_version}.")

    def load_shot_assets(self, sequence_name, shot_name):
        # 加载镜头所需的所有资产
        self.load_asset("set", "set_name", "layout", shot_name, sequence_name)
        self.load_asset("layout", "camera", "layout", shot_name, sequence_name)
        self.load_asset("character_animation", "character_name", "animation", shot_name, sequence_name)
        self.load_asset("prop_cache", "prop_name", "animation", shot_name, sequence_name)

# 示例用法
tool = SceneBuildTool()
tool.set_work_folder("/path to work folder")
tool.set_publish_folder("/path to publish folder")
tool.load_shot_assets("sequence_001", "shot_001")
